# Quest√£o 1: Desenvolva um programa em Python que pe√ßa ao usu√°rio para inserir dois n√∫meros decimais e calcule a diferen√ßa absoluta entre esses dois n√∫meros. Utilize a fun√ß√£o nativa abs para garantir que o resultado seja sempre positivo e round para arredondar o resultado para duas casas decimais.

num1 = float(input("Digite o primeiro n√∫mero decimal: "))
num2 = float(input("Digite o segundo n√∫mero decimal: "))
diferenca_absoluta = abs(num1 - num2)
resultado = round(diferenca_absoluta, 2)
print(f"A diferen√ßa absoluta entre {num1} e {num2} √©: {resultado}")


# Quest√£o 2: Escreva um c√≥digo que gere n valores inteiros aleat√≥rios entre 0 e 100 e calcule a ra√≠z quadrada da soma dos valores. Pe√ßa ao usu√°rio o valor de n. 
# Biblioteca random: Fun√ß√£o randint()
# Biblioteca math:  Fun√ß√£o sqrt()

import random
import math

n = int(input("Digite a quantidade de n√∫meros inteiros aleat√≥rios a serem gerados (n): "))
soma = sum(random.randint(0, 100) for _ in range(n))
raiz_quadrada = math.sqrt(soma)
print(f"A raiz quadrada da soma dos {n} valores aleat√≥rios √©: {raiz_quadrada:.2f}") 


# Quest√£o 3: Escreva um programa em Python que utiliza a biblioteca random para gerar um n√∫mero aleat√≥rio entre 1 e 10 e pe√ßa ao usu√°rio para adivinhar o n√∫mero. Forne√ßa feedback se o palpite √© muito alto, muito baixo ou correto. Interrompa a execu√ß√£o somente quando o usu√°rio acertar o palpite.
# Exemplo de intera√ß√£o: 
    # Adivinhe o n√∫mero entre 1 e 10: 5
    #Muito alto, tente novamente!
    #Adivinhe o n√∫mero entre 1 e 10: 3
    #Correto! O n√∫mero √© 3.

import random

numero_aleatorio = random.randint(1, 10)
palpite = None

while palpite != numero_aleatorio:
    palpite = int(input("Adivinhe o n√∫mero entre 1 e 10: "))
    if palpite < numero_aleatorio:
        print("Muito baixo, tente novamente!")
    elif palpite > numero_aleatorio:
        print("Muito alto, tente novamente!")
    else:
        print(f"Correto! O n√∫mero √© {numero_aleatorio}.")       


# Quest√£o 4: Escreva um programa em Python que utiliza a biblioteca datetime para exibir a data e hora atuais com a formata√ß√£o apresentada a seguir: Data: 15/03/2023 Hora: 14:05
# Fun√ß√£o datetime.datetime.now() cujo retorno possui os atributos: day, month, year, hour, minute
#Usar a formata√ß√£o com f-strings no momento de imprimir. Aten√ß√£o para os atributos que devem sempre ter 2 d√≠gitos precedidos por zero se necess√°rio.

import datetime

data_hora_atual = datetime.datetime.now()
data_formatada = f"Data: {data_hora_atual.day:02d}/{data_hora_atual.month:02d}/{data_hora_atual.year} Hora: {data_hora_atual.hour:02d}:{data_hora_atual.minute:02d}"
print(data_formatada)  


# Quest√£o 5: Voc√™ est√° trabalhando em um sistema de mensagens instant√¢neas, que deve permitir o uso de emojis nas conversas entre pessoas. Fa√ßa:
    # Conhe√ßa a fun√ß√£o emoji.emojize()
# Seu programa deve apresentar para o usu√°rio a lista de emojis dispon√≠veis com o texto correspondente a cada emoji. Em seguida, solicite uma frase codificada ao usu√°rio e apresente ela decodificada com a visualiza√ß√£o de emojis (emojizada).
import emoji
def listar_emojis():
    emojis = {
        ":smile:": "üòÑ",
        ":heart:": "‚ù§Ô∏è",
        ":thumbs_up:": "üëç",
        ":sunglasses:": "üòé",
        ":cry:": "üò¢",
        ":fire:": "üî•",
        ":rocket:": "üöÄ",
        ":star:": "‚≠ê"
    }
    print("Emojis dispon√≠veis:")
    for code, symbol in emojis.items():
        print(f"{code} - {symbol}")

listar_emojis()
frase_codificada = input("Digite uma frase codificada com emojis (use os c√≥digos acima): ")
frase_decodificada = emoji.emojize(frase_codificada, use_aliases=True)
print(f"Frase decodificada: {frase_decodificada}")
